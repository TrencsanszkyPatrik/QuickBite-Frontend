import React, { useState, useEffect } from 'react'
import Navbar from './components/navbar'
import Footer from './components/footer'
import '../pages//components/css/homepage.css'
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import RestaurantMap from './components/RestaurantMap';
import '../../src/pages/components/css/CuisineList.css'
import RestaurantCardList from './components/RestaurantCardList';

const API_BASE_URL = 'https://localhost:7017/api';

document.title = "QuickBite - F≈ëoldal";

export default function Homepage() {
    const [restaurants, setRestaurants] = useState([]);
    const [cuisines, setCuisines] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        fetchData();
    }, []);

    const fetchData = async () => {
        try {
            // √âttermek bet√∂lt√©se
            const restaurantsResponse = await fetch(`${API_BASE_URL}/Restaurants`);
            if (restaurantsResponse.ok) {
                const restaurantsData = await restaurantsResponse.json();
                setRestaurants(restaurantsData);
            }

            // Konyhat√≠pusok bet√∂lt√©se (ha van k√ºl√∂n endpoint)
            try {
                const cuisinesResponse = await fetch(`${API_BASE_URL}/Cuisines`);
                if (cuisinesResponse.ok) {
                    const cuisinesData = await cuisinesResponse.json();
                    setCuisines(cuisinesData);
                } else {
                    // Ha nincs k√ºl√∂n endpoint, dummy adatokat haszn√°lunk
                    setCuisines([
                        { id: 1, name: 'Olasz', icon: 'üçù' },
                        { id: 2, name: '√Åzsiai', icon: 'üçú' },
                        { id: 3, name: 'Mexik√≥i', icon: 'üåÆ' },
                        { id: 4, name: 'Amerikai', icon: 'üçî' },
                        { id: 5, name: 'Indiai', icon: 'üçõ' },
                        { id: 6, name: 'Mediterr√°n', icon: 'ü•ô' }
                    ]);
                }
            } catch (cuisineErr) {
                console.warn('Konyhat√≠pusok bet√∂lt√©si hiba, dummy adatok haszn√°lata:', cuisineErr);
                setCuisines([
                    { id: 1, name: 'Olasz', icon: 'üçù' },
                    { id: 2, name: '√Åzsiai', icon: 'üçú' },
                    { id: 3, name: 'Mexik√≥i', icon: 'üåÆ' },
                    { id: 4, name: 'Amerikai', icon: 'üçî' },
                    { id: 5, name: 'Indiai', icon: 'üçõ' },
                    { id: 6, name: 'Mediterr√°n', icon: 'ü•ô' }
                ]);
            }
        } catch (err) {
            console.error('Hiba az adatok bet√∂lt√©sekor:', err);
        } finally {
            setLoading(false);
        }
    };

    // Konyhat√≠pusokhoz tartoz√≥ √©ttermek sz√°m√°nak kisz√°m√≠t√°sa
    const getCuisineRestaurantCount = (cuisineName) => {
        return restaurants.filter(restaurant => 
            restaurant.description && restaurant.description.toLowerCase().includes(cuisineName.toLowerCase())
        ).length;
    };

    return (
        <>
            <Navbar />

            <section className="hero">
                <div className="hero-content">
                    <h1>√âhes vagy? Rendelj most! üöÄ</h1>
                    <p>Fedezd fel a k√∂rny√©k legjobb √©ttermeit √©s √©lvezd a gyors kisz√°ll√≠t√°st.</p>

                    <div className="hero-search">
                        <input type="text" placeholder="üìç Add meg a c√≠med" />
                        <input type="text" placeholder="üçï Mit keresel?" />
                        <button className="btn btn-primary">Keres√©s</button>
                    </div>

                    <div className="categories-pills">
                        <div className="pill">üçï Pizza</div>
                        <div className="pill">üçî Burger</div>
                        <div className="pill">üç£ Sushi</div>
                        <div className="pill">üåÆ Mexik√≥i</div>
                        <div className="pill">üçù T√©szta</div>
                    </div>
                </div>
            </section>

            <div className="container">
                <RestaurantMap restaurants={restaurants} />
            </div>

            <div className="container">
                <div className="benefits">
                    <div className="benefit-card">
                        <div className="benefit-icon">‚≠ê</div>
                        <h3>Legjobb √©ttermek</h3>
                        <p>Csak ellen≈ërz√∂tt, magas min≈ës√©g≈± √©ttermekkel dolgozunk. Minden vend√©gl√°t√≥hely megfelel a legszigor√∫bb k√∂vetelm√©nyeknek.</p>
                    </div>
                    <div className="benefit-card">
                        <div className="benefit-icon">‚ö°</div>
                        <h3>Vill√°mgyors sz√°ll√≠t√°s</h3>
                        <p>30 percen bel√ºl kisz√°ll√≠tjuk az √©teledet. Val√≥s idej≈± k√∂vet√©ssel mindig tudod, hol j√°r a fut√°r.</p>
                    </div>
                    <div className="benefit-card">
                        <div className="benefit-icon">üí≥</div>
                        <h3>Biztons√°gos fizet√©s</h3>
                        <p>Fizet√©s k√©szp√©nzzel, bankk√°rty√°val vagy online. Minden tranzakci√≥ biztons√°gos √©s v√©dett.</p>
                    </div>
                </div>
            </div>

            <div className="container">
                <h2 className="section-title">B√∂ng√©ssz konyhat√≠pus szerint</h2>
                {loading ? (
                    <div className="loading">Bet√∂lt√©s...</div>
                ) : (
                    <div className="cuisines-grid">
                        {cuisines.map((cuisine) => (
                            <div key={cuisine.id} className="cuisine-card">
                                <div className="cuisine-icon">{cuisine.icon}</div>
                                <span className="cuisine-title">{cuisine.name}</span>
                                <span className="cuisine-meta">
                                    {getCuisineRestaurantCount(cuisine.name)} √©tterem
                                </span>
                            </div>
                        ))}
                    </div>
                )}
            </div>

            <RestaurantCardList />

            <Footer />
        </>
    )
}
